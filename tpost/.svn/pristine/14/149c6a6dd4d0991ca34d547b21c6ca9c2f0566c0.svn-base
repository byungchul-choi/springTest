package tpost.msgRcve.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.nhncorp.lucy.security.xss.XssSaxFilter;

import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import tpost.commCode.controller.commCdMgntController;
import tpost.commUtil.commUtil;
import tpost.msgRcve.service.guAcmdCerfService;
import tpost.msgRcve.vo.guAcmdCerfVO;
import tpost.msgRcve.vo.msgRcveVO;

@Controller
@RequestMapping(value = "/msgRcve")
public class guAcmdCerfController {
	Logger log = (Logger) LogManager.getLogger(commCdMgntController.class);
	
	@Autowired
	guAcmdCerfService guAcmdCerfService;
	
	@RequestMapping(value = "/guAcmdCerfMgnt")
	public String guAcmdCerfInit(Model model, @ModelAttribute guAcmdCerfVO guAcmdCerfVO) {
		log.debug("/msgRcve/guAcmdCerfMgnt - guAcmdCerfInit");

		return "msgRcve/guAcmdCerfMgnt";
	}
	
	//문자 인증 시 본인확인
	@ResponseBody
	@RequestMapping(value = "/onesCtifCheck.ajax")
	public Map onesCtifCheck(@ModelAttribute guAcmdCerfVO guAcmdCerfVO) {
		log.debug("/msgRcve/onesCtifCheck - onesCtifCheck");	
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String errorMessage = "";
		
		resultMap.put("result", "Y");
		resultMap.put("ciNum", "gdlIa53FZGQz5aKa3wLk33nW57N3mDpcwHytWlWMhzxHKulk7EZsPsQkGlay8LoW7KpRLwE8Xt7F5OGUi1rVrw==");		
		resultMap.put("errorMessage", errorMessage);
		
		return resultMap;
	}
	
	
	@RequestMapping(value = "/guAcmdCerfListSelect")
	public String guAcmdCerfListSelect(Model model, @ModelAttribute guAcmdCerfVO guAcmdCerfVO) {
		log.debug("/msgRcve/guAcmdCerfListSelect - guAcmdCerfListSelect :: " + guAcmdCerfVO.getPageIndex());
		
		String ciNum = guAcmdCerfVO.getCiNum();
		
		model.addAttribute("ciNum", guAcmdCerfVO.getCiNum());
		model.addAttribute("inputOganCd", guAcmdCerfVO.getInputOganCd());
		model.addAttribute("inputRcveStDt", guAcmdCerfVO.getInputRcveStDt());
		model.addAttribute("inputRcveClosDt", guAcmdCerfVO.getInputRcveClosDt());
		model.addAttribute("pageIndex", guAcmdCerfVO.getPageIndex());
		
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(guAcmdCerfVO.getPageIndex()); //현재 페이지 번호
		paginationInfo.setRecordCountPerPage(10);  //한 페이지에 게시되는 게시물 건수
		paginationInfo.setPageSize(10); //페이징 리스트의 사이즈
		 	
		guAcmdCerfVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		guAcmdCerfVO.setLastIndex(paginationInfo.getLastRecordIndex());
		guAcmdCerfVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());
		
		guAcmdCerfVO.setInputRcveClosDt(commUtil.dateToText(guAcmdCerfVO.getInputRcveClosDt()));
		guAcmdCerfVO.setInputRcveStDt(commUtil.dateToText(guAcmdCerfVO.getInputRcveStDt()));
		
		//내역조회
		List<guAcmdCerfVO> guAcmdCerfList = guAcmdCerfService.guAcmdCerfMListSelect(guAcmdCerfVO);
		
		if(guAcmdCerfList != null && guAcmdCerfList.size() > 0) {
			for(int i = 0; i < guAcmdCerfList.size(); i++) {
				guAcmdCerfVO tempVO = new guAcmdCerfVO();
				tempVO.setOganCd(guAcmdCerfList.get(i).getOganCd());
				tempVO.setTmpltCd(guAcmdCerfList.get(i).getTmpltCd());
				tempVO.setTransDt(guAcmdCerfList.get(i).getTransDt());
				tempVO.setCiNum(ciNum);
				
				guAcmdCerfVO resultVO = guAcmdCerfService.guAcmdCerfSelect(tempVO);
				
				if(resultVO != null) {
					guAcmdCerfList.get(i).setApctYn("Y");
					
					guAcmdCerfList.get(i).setApctDate(resultVO.getApctDate());
					guAcmdCerfList.get(i).setApctName(resultVO.getApctName());
					guAcmdCerfList.get(i).setIssCls(resultVO.getIssCls());
					guAcmdCerfList.get(i).setDwldUrl(resultVO.getDwldUrl());
				}
				else {
					guAcmdCerfList.get(i).setApctYn("N");
				}
			}
		}
			
		model.addAttribute("guAcmdCerfList", guAcmdCerfList);
		
		//총건수셋팅
		paginationInfo.setTotalRecordCount ((Integer)guAcmdCerfService.guAcmdCerfMListCountSelect(guAcmdCerfVO));
		model.addAttribute("paginationInfo", paginationInfo);
	
		return "msgRcve/guAcmdCerfMgnt";
	}
	
	
	//열람이력 조회
	@ResponseBody
	@RequestMapping(value = "/goPopuRdngList.ajax")
	public Map goPopuRdngList(@ModelAttribute guAcmdCerfVO guAcmdCerfVO) {
		log.debug("/msgRcve/onesCtifCheck - onesCtifCheck");	
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		guAcmdCerfVO.setSndnDate(commUtil.dateToText(guAcmdCerfVO.getSndnDate()));
		List<guAcmdCerfVO> resultVO = guAcmdCerfService.rdngListSelect(guAcmdCerfVO);
		
		resultMap.put("rdngList", resultVO);
		resultMap.put("allCount", resultVO.size());
				
		return resultMap;
	}
	
	
	//문자 인증 시 본인확인
	@ResponseBody
	@RequestMapping(value = "/guAcmdCerfInsert.ajax")
	public Map guAcmdCerfInsert(@ModelAttribute guAcmdCerfVO guAcmdCerfVO) {
		log.debug("/msgRcve/guAcmdCerfInsert - guAcmdCerfInsert");	
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		guAcmdCerfService.guAcmdCerfInsert(guAcmdCerfVO);
				
		return resultMap;
	}
}