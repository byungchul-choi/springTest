package tpost.batch.controller;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.font.FontRenderContext;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import tpost.batch.service.fileTestService;
import tpost.batch.vo.fileTestVO;
import tpost.commCode.controller.commCdMgntController;
import tpost.logIn.vo.logInVO;


@Component
@Controller
@RequestMapping(value = "/batch/fileTest")
public class fileTest_img {

	@Autowired
	fileTestService fileTestService;
	
	/*로그설정 입니다. */
	Logger log = (Logger) LogManager.getLogger(commCdMgntController.class);

	String osName = System.getProperty("os.name");
	
	
	 /*파일 배치 테스트 입니다.  */
	 @ResponseBody
	 @RequestMapping(value = "/image", method = RequestMethod.POST)
	 public Map batchTestMain1(Model model , @ModelAttribute fileTestVO fileTestVO ) {
		 
		 log.debug("stateu s   ==> image");
		 Map<String, Object> resultMap = new HashMap<String, Object>();
		
		 String FileNm = fileTestVO.getFileNm();
		 String exeDt = fileTestVO.getExeDt();
		 String oganCd = fileTestVO.getOganCd();
		 String tmpltCd = fileTestVO.getTmpltCd();
		 
		 log.debug("FileNm ==> " + FileNm);
		 /*파일 업로드 */
//		 batchtest_Test(fileName);
//		 batchtest_img(FileNm, exeDt, oganCd, tmpltCd);
		  
//			url="http://localhost/print.jsp";
//			path="D:\\tmp1.jpg";
		 logInVO logInVO = new logInVO();
				 
		 gogo ();
//		 String url = "http://localhost:8080/tpost/index1.jsp?custId=ccc";
//		 String path="c:\\imgTest\\httpImg.jpg";
//		 imgTest.batchtest_img(url, path);
		 
		 
		 
		 /*test */
		 resultMap.put("result", "Y");
		 resultMap.put("result", "Y");
		 resultMap.put("result", "Y");
		 resultMap.put("result", "Y");
		 resultMap.put("status", "delete");
		 resultMap.put("errorMessage", "");
		 
		 return resultMap;
	 }
	 
	 public void gogo () {

		  long startTime = System.currentTimeMillis();

		  String subject = "최병철 이미지 테스트입니다.";
		  String dal = "2월";
		  String il = "31일";
		  String year = "2015";

		  SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

		  Date date = new Date();

		  File makeImage = new File("C://imgTest/myFeedImage_" + sdf.format(date) + ".jpg");
		  
		  print("saved New image name : " + makeImage.toString());

		  File loadImage = new File("c://SMS.jpg");

		  BufferedImage bi = null;

		  try {

		   bi = ImageIO.read(loadImage);

		  } catch (IOException e) {

		   print("이미지 불러오다가 에러 나쓔..ㅜㅜ");

		   e.printStackTrace();

		  }

		  int imgWidth = bi.getWidth();

		  int imgHeight = bi.getHeight();

		  print("loadImage\nwidth : " + imgWidth + ", height : " + imgHeight);

		  Graphics2D g2 = null;

		  g2 = bi.createGraphics();

		  // text에 적용할 폰트 생성, 아래 폰트는 시스템에 설치 되어 있어야 사용할 수 있음

		  Font font = new Font("Gungsuh", Font.BOLD, 15);

		  // 가운데 정렬하기 위해, text의 width구하기

		  FontRenderContext frc = new FontRenderContext(null, true, true);

		  Rectangle2D r2 = font.getStringBounds(subject, frc);

		  int textWidth = (int) r2.getWidth();

		  float paddingleft = 0;

		  // 입력하는 문자의 가용 넓이

		  int textWide = 439;

		  paddingleft = ((textWide - textWidth) / 2) + 20;

		  print("textWidth : " + textWidth);

		  print("paddingleft : " + paddingleft);

		  // 폰트 색상 설정

		  g2.setColor(Color.black);

		  // 폰트 종류 설정

		  g2.setFont(font);

		  // 이미지에 텍스트 사입. (text,x축,y축)

		  /*g2.drawString(subject, paddingleft, (float) (imgHeight * 0.8247));*/
		  g2.drawString(year, 336, 773);
		  g2.drawString(subject, 20, 20);
		  g2.dispose();

		  try {

		   ImageIO.write(bi, "jpg", makeImage);

		  } catch (IOException e) {

		   System.out.print("새로운 이미지 저장하다가 에러 나쓔..ㅜㅜ");

		   e.printStackTrace();

		  }

		  print("text length : " + subject.length());

		  print("end make image");

		  long endTime = System.currentTimeMillis();

		  print("currentTimeMillis()형태\n시작시간 : " + startTime + ", 종료시간 : " + endTime);

		  print("이미지 생성하는데 걸린 시간 [" + ((endTime - startTime) / 1000.0) + "]");

		 }

		 public static void print(String str) {

		  System.out.print("\n" + str + "\n");

		 }

}

	
