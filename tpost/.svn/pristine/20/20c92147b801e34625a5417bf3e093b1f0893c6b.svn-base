package tpost.msgRcve.controller;

import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.nhncorp.lucy.security.xss.XssSaxFilter;

import tpost.commCode.controller.commCdMgntController;
import tpost.commUtil.commUtil;
import tpost.msgRcve.vo.msgRcveVO;
import tpost.msgRcve.service.msgRcveService;

@Controller
@RequestMapping(value = "/msgRcve")
public class msgRcveController {
	Logger log = (Logger) LogManager.getLogger(commCdMgntController.class);
	
	@Value("#{properties['aesKey']}") 
	private String aesKey;
	
	@Autowired
	msgRcveService msgRcveService;
	
	@RequestMapping(value = "/msgRcveGdc")
	public String msgRcveGdcInit(Model model, @ModelAttribute msgRcveVO msgRcveVO) {
		log.debug("/msgRcve/msgRcveGdc - msgRcveGdcInit");
		model.addAttribute("a", msgRcveVO.getA());
		model.addAttribute("b", msgRcveVO.getB());
		
		String hexKey = msgRcveService.getHexKeySelect(msgRcveVO);
		
		if(msgRcveVO.getB() != null && msgRcveVO.getB().equals(hexKey)) {
			return goMsgRcveData(model, msgRcveVO);
		}else {
			return "msgRcve/msgRcveGdc";
		}
	}
	
	//문자 인증 시 본인확인
	@ResponseBody
	@RequestMapping(value = "/onesCheck.ajax")
	public Map onesCheck(@ModelAttribute msgRcveVO msgRcveVO) {
		log.debug("/msgRcve/msgRcveGdc - onesCheck");	
		
		return msgRcveService.onesCheck(msgRcveVO);
	}
	
	//템플릿 양식에 고지정보 매핑
	@RequestMapping(value = "/goMsgRcveData")
	public String goMsgRcveData(Model model, @ModelAttribute msgRcveVO msgRcveVO) {
		log.debug("/msgRcve/msgRcveData - goMsgRcveData :: " + msgRcveVO.getB());
		
		String b = msgRcveVO.getB();
		
		msgRcveVO = msgRcveService.getOfapElctAddrSelect_Anoc(msgRcveVO);

		//Html 양식 셋팅
		XssSaxFilter filter = XssSaxFilter.getInstance("lucy-xss-sax.xml", true);
		String tmpltHtml = commUtil.replaceTag(msgRcveService.tmpltHtmlSelect(msgRcveVO).getTmpltHtml());
		tmpltHtml = filter.doFilter(tmpltHtml);
		
		String anocInfo = msgRcveService.anocInfoListSelect(msgRcveVO).getAnocInfo();
		List<msgRcveVO> schemaList = msgRcveService.tmpltSchemaSelect(msgRcveVO);
		
		byte[] bytes = anocInfo.getBytes();
		
		log.debug(bytes.length);
		int startIdx = 0;
		for(int i = 4; i < schemaList.size(); i++) {
			int cutSize = Integer.parseInt(schemaList.get(i).getItemLen());
		
			String attrName = "${" + schemaList.get(i).getItemNm() + "}";
			String val = new String(bytes, startIdx, cutSize).trim();
			
			tmpltHtml = tmpltHtml.replace(attrName, val);			
			
			startIdx += cutSize;
		}
		
		model.addAttribute("tmpltHtml", tmpltHtml);
		
		if(b != null && b.equals("1")) {
			;
		}else {
			msgRcveService.insertRegnDate(msgRcveVO);
		}
		
		return "msgRcve/msgRcveData";
	}
	
	//수신거부/해제 페이지로
	@RequestMapping(value = "/msgRcveRfslDsms")
	public String msgRcveRfslDsmsInit(Model model, @ModelAttribute msgRcveVO msgRcveVO) {
		log.debug("/msgRcve/msgRcveRfslDsms - msgRcveRfslDsmsInit");
		model.addAttribute("a", msgRcveVO.getA());
		
		msgRcveVO = msgRcveService.getOfapElctAddrSelect_Rcve(msgRcveVO);
		msgRcveVO = msgRcveService.sndnRfslSelect(msgRcveVO);

		model.addAttribute("sndnRfsl", msgRcveVO.getSndnRfsl());
		model.addAttribute("seqNo", msgRcveVO.getSeqNo());
		
		String title = "";
		if(msgRcveVO.getSndnRfsl().equals("1")) title = "수신거부";
		else title = "수신거부 해제";
		
		model.addAttribute("title", title);
		
		return "msgRcve/msgRcveRfslDsms";
	}
	
	//수신거부/해재
	@ResponseBody
	@RequestMapping(value = "/sndnRfslUpdate.ajax")
	public Map sndnRfslUpdate(@ModelAttribute msgRcveVO msgRcveVO) {
		log.debug("/msgRcve/msgRcveRfslDsms - sndnRfslUpdate");	
		
		return msgRcveService.sndnRfslUpdate(msgRcveVO);
	}
}